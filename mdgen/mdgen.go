package mdgen

import (
	"github.com/junaidrahim/argodocs/markdown"
	"github.com/junaidrahim/argodocs/workflow"
)

func GetMdDoc(templateFile *workflow.TemplateFile) (*markdown.Doc, error) {
	templateTypes := map[workflow.TemplateType]string{
		workflow.CONTAINER_SET_TEMPLATE: "Container Set",
		workflow.CONTAINER_TEMPLATE:     "Container",
		workflow.DAG_TEMPLATE:           "DAG",
		workflow.DATA_TEMPLATE:          "DATA",
		workflow.HTTP_TEMPLATE:          "HTTP",
		workflow.PLUGIN_TEMPLATE:        "Plugin",
		workflow.SCRIPT_TEMPLATE:        "Script",
	}
	md := markdown.NewDoc()

	_, err := md.WriteHeader(templateFile.Name, 1)
	if err != nil {
		return nil, err
	}
	md.Writeln()
	md.Write("> This file is generated by argodocs. Please do not Edit.")
	md.Writeln()
	table := markdown.NewTable(1, 4)
	table.SetTableTitle(0, "Kind")
	table.SetTableTitle(1, "Version")
	table.SetTableTitle(2, "Entrypoint Template")
	table.SetTableTitle(3, "Last Updated At")
	table.SetTableContent(0, 0, templateFile.Kind)
	table.SetTableContent(0, 1, templateFile.Version)
	table.SetTableContent(0, 2, templateFile.EntrypointTemplate)
	table.SetTableContent(0, 3, templateFile.LastUpdatedAt)
	md.WriteTable(table)

	md.Writeln()
	md.Write(templateFile.Description)
	md.Writeln()
	md.WriteHeader("Templates", 2)
	md.Writeln()
	md.Write("A list of all the templates present in the Workflow Template")

	table = markdown.NewTable(len(templateFile.Templates), 3)
	table.SetTableTitle(0, "Name")
	table.SetTableTitle(1, "Type")
	table.SetTableTitle(2, "Line Number")

	for i, template := range templateFile.Templates {
		table.SetTableContent(i, 0, markdown.GetLink(template.Name, "#"+template.Name))
		table.SetTableContent(i, 1, templateTypes[template.Type])
		table.SetTableContent(i, 2, string(template.LineNumber))
	}

	md.WriteTable(table)
	md.Writeln()

	for _, template := range templateFile.Templates {
		md.WriteHeader(template.Name, 3)
		md.Writeln()
		md.Write(template.Description)
		md.Writeln()

		var inputs, outputs, paramList, artifactList markdown.ListNode

		inputs.Value = "Inputs"
		inputs.NodeType = markdown.ListTypeUnordered

		paramList.Value = "Parameters"
		paramList.NodeType = markdown.ListTypeUnordered

		for _, param := range template.Inputs.Parameters {
			var child markdown.ListNode
			child.Value = markdown.GetMonospaceCode(param.Name) + " - " + param.Description
			child.NodeType = markdown.ListTypeUnordered
			paramList.Children = append(paramList.Children, &child)
		}

		artifactList.Value = "Artifacts"
		artifactList.NodeType = markdown.ListTypeUnordered

		for _, artifact := range template.Inputs.Artifacts {
			var child markdown.ListNode
			child.Value = markdown.GetMonospaceCode(artifact.Name) + " - " + artifact.Description
			child.NodeType = markdown.ListTypeUnordered
			artifactList.Children = append(paramList.Children, &child)
		}

		inputs.Children = append(inputs.Children, &paramList)
		inputs.Children = append(inputs.Children, &artifactList)

		outputs.Value = "Outputs"
		outputs.NodeType = markdown.ListTypeUnordered

		paramList.Value = "Parameters"
		paramList.NodeType = markdown.ListTypeUnordered

		for _, param := range template.Outputs.Parameters {
			var child markdown.ListNode
			child.Value = param.Name
			child.NodeType = markdown.ListTypeUnordered
			paramList.Children = append(paramList.Children, &child)
		}

		artifactList.Value = "Artifacts"
		artifactList.NodeType = markdown.ListTypeUnordered

		for _, artifact := range template.Inputs.Artifacts {
			var child markdown.ListNode
			child.Value = artifact.Name
			child.NodeType = markdown.ListTypeUnordered
			artifactList.Children = append(paramList.Children, &child)
		}

		outputs.Children = append(outputs.Children, &paramList)
		outputs.Children = append(outputs.Children, &artifactList)

		var tasks markdown.ListNode

		tasks.Value = "Tasks"
		tasks.NodeType = markdown.ListTypeUnordered

		for _, task := range template.Tasks {
			var child, cchild markdown.ListNode
			child.Value = markdown.GetMonospaceCode(task.Name)
			child.NodeType = markdown.ListTypeUnordered

			cchild.Value = task.Description
			cchild.NodeType = markdown.ListTypeUnordered
			child.Children = append(child.Children, &cchild)

			cchild.Value = task.Template
			cchild.NodeType = markdown.ListTypeUnordered
			child.Children = append(child.Children, &cchild)

			tasks.Children = append(tasks.Children, &child)
		}

		var parent markdown.ListNode

		parent.Value = ""
		parent.NodeType = markdown.ListTypeUnordered
		parent.Children = append(parent.Children, &inputs)
		parent.Children = append(parent.Children, &outputs)
		parent.Children = append(parent.Children, &tasks)

		md.WriteList(&parent)
		md.Writeln()
	}
	return md, nil
}
