package mdgen

import (
	"github.com/junaidrahim/argodocs/markdown"
	"github.com/junaidrahim/argodocs/workflow"
	"strconv"
	"strings"
)

func GetMdDoc(templateFile *workflow.TemplateFile) (*markdown.Doc, error) {
	templateTypes := map[workflow.TemplateType]string{
		workflow.CONTAINER_SET_TEMPLATE: "Container Set",
		workflow.CONTAINER_TEMPLATE:     "Container",
		workflow.DAG_TEMPLATE:           "DAG",
		workflow.DATA_TEMPLATE:          "DATA",
		workflow.HTTP_TEMPLATE:          "HTTP",
		workflow.PLUGIN_TEMPLATE:        "Plugin",
		workflow.SCRIPT_TEMPLATE:        "Script",
	}
	md := markdown.NewDoc()

	md.WriteHeader(templateFile.Name, 1)
	md.Writeln()
	md.Write("> This file is generated by argodocs. Please do not Edit.")
	md.Writeln()
	md.Writeln()
	table := markdown.NewTable(1, 4)
	table.SetTableTitle(0, "Kind")
	table.SetTableTitle(1, "Version")
	table.SetTableTitle(2, "Entrypoint Template")
	table.SetTableTitle(3, "Last Updated At")
	table.SetTableContent(0, 0, templateFile.Kind)
	table.SetTableContent(0, 1, templateFile.Version)
	table.SetTableContent(0, 2, templateFile.EntrypointTemplate)
	table.SetTableContent(0, 3, templateFile.LastUpdatedAt)
	md.WriteTable(table)

	md.Writeln()
	md.Write(templateFile.Description)
	md.Writeln()
	md.WriteHeader("Templates", 2)
	md.Writeln()
	md.Write("A list of all the templates present in the Workflow Template")
	md.Writeln()
	md.Writeln()

	table = markdown.NewTable(len(templateFile.Templates), 3)
	table.SetTableTitle(0, "Name")
	table.SetTableTitle(1, "Type")
	table.SetTableTitle(2, "Line Number")

	for i, template := range templateFile.Templates {
		table.SetTableContent(i, 0, markdown.GetLink(template.Name, "#"+template.Name))
		table.SetTableContent(i, 1, markdown.GetMonospaceCode(templateTypes[template.Type]))
		table.SetTableContent(i, 2, strconv.Itoa(template.LineNumber))
	}

	md.WriteTable(table)
	md.Writeln()

	for _, template := range templateFile.Templates {
		md.Write("---")
		md.Writeln()
		md.Writeln()
		md.WriteHeader(template.Name, 3)
		md.Writeln()
		md.Write("Type: " + markdown.GetMonospaceCode(templateTypes[template.Type]))
		md.Writeln()
		md.Writeln()
		md.Write(template.Description)
		md.Writeln()

		var inputs, inputParamList, inputArtifactList markdown.ListNode
		var outputs, outputParamList, outputArtifactList markdown.ListNode

		if template.Inputs != nil {
			inputs.Value = "Inputs"
			inputs.NodeType = markdown.ListTypeUnordered

			if len(template.Inputs.Parameters) > 0 {
				inputParamList.Value = "Parameters"
				inputParamList.NodeType = markdown.ListTypeUnordered
			}

			for _, param := range template.Inputs.Parameters {
				var child markdown.ListNode
				trimmedDescription := strings.Trim(param.Description, "\n")
				if trimmedDescription != "" {
					child.Value = markdown.GetMonospaceCode(param.Name) + " - " + trimmedDescription
				} else {
					child.Value = markdown.GetMonospaceCode(param.Name)
				}
				child.NodeType = markdown.ListTypeUnordered
				inputParamList.Children = append(inputParamList.Children, &child)
			}

			if len(template.Inputs.Artifacts) > 0 {
				inputArtifactList.Value = "Artifacts"
				inputArtifactList.NodeType = markdown.ListTypeUnordered
			}

			for _, artifact := range template.Inputs.Artifacts {
				var child markdown.ListNode
				trimmedDescription := strings.Trim(artifact.Description, "\n")
				if trimmedDescription != "" {
					child.Value = markdown.GetMonospaceCode(artifact.Name) + " - " + trimmedDescription
				} else {
					child.Value = markdown.GetMonospaceCode(artifact.Name)
				}
				child.NodeType = markdown.ListTypeUnordered
				inputArtifactList.Children = append(inputParamList.Children, &child)
			}
		}

		inputs.Children = append(inputs.Children, &inputParamList)
		inputs.Children = append(inputs.Children, &inputArtifactList)

		if template.Outputs != nil {
			outputs.Value = "Outputs"
			outputs.NodeType = markdown.ListTypeUnordered

			if len(template.Outputs.Parameters) > 0 {
				outputParamList.Value = "Parameters"
				outputParamList.NodeType = markdown.ListTypeUnordered
			}

			for _, param := range template.Outputs.Parameters {
				var child markdown.ListNode
				trimmedDescription := strings.Trim(param.Description, "\n")
				if trimmedDescription != "" {
					child.Value = markdown.GetMonospaceCode(param.Name) + " - " + trimmedDescription
				} else {
					child.Value = markdown.GetMonospaceCode(param.Name)
				}
				child.NodeType = markdown.ListTypeUnordered
				outputParamList.Children = append(outputParamList.Children, &child)
			}

			if len(template.Outputs.Artifacts) > 0 {
				outputArtifactList.Value = "Artifacts"
				outputArtifactList.NodeType = markdown.ListTypeUnordered
			}

			for _, artifact := range template.Inputs.Artifacts {
				var child markdown.ListNode
				trimmedDescription := strings.Trim(artifact.Description, "\n")
				if trimmedDescription != "" {
					child.Value = markdown.GetMonospaceCode(artifact.Name) + " - " + trimmedDescription
				} else {
					child.Value = markdown.GetMonospaceCode(artifact.Name)
				}
				child.NodeType = markdown.ListTypeUnordered
				outputArtifactList.Children = append(outputArtifactList.Children, &child)
			}
		}

		outputs.Children = append(outputs.Children, &outputParamList)
		outputs.Children = append(outputs.Children, &outputArtifactList)

		var tasks markdown.ListNode

		if len(template.Tasks) > 0 {
			tasks.Value = "Tasks"
			tasks.NodeType = markdown.ListTypeUnordered
		}

		for _, task := range template.Tasks {
			var name, description, taskTemplate markdown.ListNode
			name.Value = markdown.GetMonospaceCode(task.Name)
			name.NodeType = markdown.ListTypeUnordered

			description.Value = strings.Trim(task.Description, "\n")
			description.NodeType = markdown.ListTypeUnordered
			name.Children = append(name.Children, &description)

			if strings.Contains(task.Template, "::") {
				taskTemplate.Value = "Template: " + task.Template
			} else {
				taskTemplate.Value = "Template: " + markdown.GetLink(task.Template, "#"+task.Template)
			}
			taskTemplate.NodeType = markdown.ListTypeUnordered
			name.Children = append(name.Children, &taskTemplate)

			tasks.Children = append(tasks.Children, &name)
		}

		var parent markdown.ListNode

		parent.Value = ""
		parent.NodeType = markdown.ListTypeUnordered
		parent.Children = append(parent.Children, &inputs)
		parent.Children = append(parent.Children, &outputs)
		parent.Children = append(parent.Children, &tasks)

		md.WriteList(&parent)
		md.Writeln()
	}
	return md, nil
}
